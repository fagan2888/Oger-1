# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _odeproblempython
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


IMAX = _odeproblempython.IMAX
NUSE = _odeproblempython.NUSE
SHRINK = _odeproblempython.SHRINK
GROW = _odeproblempython.GROW
MAXSTP = _odeproblempython.MAXSTP
TINY = _odeproblempython.TINY
SAVE_VALUES_MAXIMUM = _odeproblempython.SAVE_VALUES_MAXIMUM
MAX_PYARRAYS_ODESOLVER = _odeproblempython.MAX_PYARRAYS_ODESOLVER
OdePNumpyArraySizeTooLarge = _odeproblempython.OdePNumpyArraySizeTooLarge
OdePPastKount = _odeproblempython.OdePPastKount
OdeP_opNULL = _odeproblempython.OdeP_opNULL
OdePAccuracyNotSet = _odeproblempython.OdePAccuracyNotSet
OdePupdateCalledBeforeCalcdydt = _odeproblempython.OdePupdateCalledBeforeCalcdydt
OdePTooManyNumpyArrays = _odeproblempython.OdePTooManyNumpyArrays
OdePNotFoundCorrespondingData = _odeproblempython.OdePNotFoundCorrespondingData
class OdeProblemPythonException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdeProblemPythonException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdeProblemPythonException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odeproblempython.new_OdeProblemPythonException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odeproblempython.delete_OdeProblemPythonException
    __del__ = lambda self : None;
OdeProblemPythonException_swigregister = _odeproblempython.OdeProblemPythonException_swigregister
OdeProblemPythonException_swigregister(OdeProblemPythonException)
cvar = _odeproblempython.cvar
OdePythonErrorMsgs = cvar.OdePythonErrorMsgs

class OdeProblemC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdeProblemC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdeProblemC, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _odeproblempython.delete_OdeProblemC
    __del__ = lambda self : None;
    def print_y(*args): return _odeproblempython.OdeProblemC_print_y(*args)
    def solve_DE(*args): return _odeproblempython.OdeProblemC_solve_DE(*args)
    def set_save_every(*args): return _odeproblempython.OdeProblemC_set_save_every(*args)
    def set_accuracy(*args): return _odeproblempython.OdeProblemC_set_accuracy(*args)
    def get_timestep_after_simulation(*args): return _odeproblempython.OdeProblemC_get_timestep_after_simulation(*args)
    def get_correct_predicted(*args): return _odeproblempython.OdeProblemC_get_correct_predicted(*args)
    def get_wrong_predicted(*args): return _odeproblempython.OdeProblemC_get_wrong_predicted(*args)
    def get_internal_steps(*args): return _odeproblempython.OdeProblemC_get_internal_steps(*args)
    def get_yvals_and_time_at(*args): return _odeproblempython.OdeProblemC_get_yvals_and_time_at(*args)
OdeProblemC_swigregister = _odeproblempython.OdeProblemC_swigregister
OdeProblemC_swigregister(OdeProblemC)

class OdeProblemPython(OdeProblemC):
    __swig_setmethods__ = {}
    for _s in [OdeProblemC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdeProblemPython, name, value)
    __swig_getmethods__ = {}
    for _s in [OdeProblemC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OdeProblemPython, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == OdeProblemPython:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _odeproblempython.new_OdeProblemPython(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odeproblempython.delete_OdeProblemPython
    __del__ = lambda self : None;
    def calc_dydt_python(*args): return _odeproblempython.OdeProblemPython_calc_dydt_python(*args)
    def update_python(*args): return _odeproblempython.OdeProblemPython_update_python(*args)
    def calc_dydt(*args): return _odeproblempython.OdeProblemPython_calc_dydt(*args)
    def update(*args): return _odeproblempython.OdeProblemPython_update(*args)
    def __disown__(self):
        self.this.disown()
        _odeproblempython.disown_OdeProblemPython(self)
        return weakref_proxy(self)
OdeProblemPython_swigregister = _odeproblempython.OdeProblemPython_swigregister
OdeProblemPython_swigregister(OdeProblemPython)

solve_DE = _odeproblempython.solve_DE
set_debug_level_python = _odeproblempython.set_debug_level_python
set_accuracy = _odeproblempython.set_accuracy
get_yvals_and_time_at = _odeproblempython.get_yvals_and_time_at
get_internal_steps = _odeproblempython.get_internal_steps
get_correct_predicted = _odeproblempython.get_correct_predicted
get_wrong_predicted = _odeproblempython.get_wrong_predicted
set_save_every = _odeproblempython.set_save_every
del_OdeProblemC = _odeproblempython.del_OdeProblemC
set_OdeProblemC = _odeproblempython.set_OdeProblemC
set_OdeProblemCInlineObject = _odeproblempython.set_OdeProblemCInlineObject


